[comment {-*- tcl -*- doctools manpage}]
[manpage_begin tclyaml n 0.1]
[include include/module.inc]
[titledesc {TclYAML - API}]
[description]
[include include/welcome.inc]

[para] This document is the reference manpage for the publicly visible API,
i.e. the API a user will see, and use.

This API falls into two big sections, for the generation of YAML from Tcl
data structures on one side, and the parsing of YAML into Tcl structures on
the other.

[section {Parsing YAML}]

[list_begin definitions]

[call [cmd {tclyaml read channel}] [arg chan]]
[call [cmd {tclyaml read file}]    [arg path]]

These two commands read the YAML documents found in the channel ([arg chan]),
or file ([arg path]) and return a Tcl list where each element represents a
single document found in the input.

[para] For each document YAML scalars are converted to Tcl strings, and YAML
sequences and mappings to Tcl lists and dictionaries.


[call [cmd {tclyaml readTags channel}] [arg chan]]
[call [cmd {tclyaml readTags file}]    [arg path]]

These two commands behave like their plain [cmd read] counterparts above,
except that the data structure they return per element is a [term tagged]
structure where each YAML construct is converted into a 2-element list of
type-tag and value (in this order).

[para] While this type of structure is more difficult to access due to the
additional nesting levels, in return it does not lose YAML's type information.
This allows users to properly distinguish between lists and dictionaries, for
example, if the input YAML allows different syntax for specific keys. Another
example would be string versus list, for example in a key allowing one to many
things of some kind, and a string is the same as a list of one element. In an
untagged conversion these cases are difficult to impossible to distinguish.

[call [cmd {tclyaml parse channel}] [arg channel] [arg cmd]...]

This command provides the lowest level of access to the YAML parser. Reading
YAML data from the specified [arg channel] each structural element encountered
is reported through an invokation of the command prefix [arg cmd]...

[para] This command prefix is invoked with two additional arguments, the type of
the found element, and a dictionary holding detailed information about it.

[para] %%TODO%% Describe the 'events', and their dictionaries.


[list_end]

[section {Generating YAML}]

[list_begin definitions]

[call [cmd {tclyaml write channel}] [arg spec] [arg chan] [arg value]]
[call [cmd {tclyaml write file}]    [arg spec] [arg path] [arg value]]

These two commands convert the Tcl data structure [arg value] into YAML, under
the guidance of the type information in [arg spec], which describes the expected
structure of the [arg value], i.e. essentially provides type annotation/tagging
of the [arg value], but separate from the value itself.

[para] The resulting YAML is written to a channel ([arg chan], expected to be
open for writing), or file ([arg path]). For the latter, an existing file is
overwritten.

[para] %%TODO%% Describe structure of [arg spec].

[call [cmd {tclyaml write deftype}] [arg name] [arg arguments] [arg body]]

This command defines a new type conversion command [arg name] for use in the
[cmd {tclyaml write ...}] commands above.

[para] The [arg arguments] are what has to be specified in a structure
specification (see [arg spec] above). Beyond these the [arg body] will have
access to three standard arguments named "writer", "structure", and "value".

[para] %%TODO%% describe the standard arguments.

[list_end]


[include include/feedback.inc]
[manpage_end]

