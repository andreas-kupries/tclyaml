Basic manpage, no formatting.

- package require tclyaml

- tclyaml read channel <channel>

  Processes the yaml documents found in the open channel, starting at
  the current location in that channel.

  Result is a list of documents.
  A document is list of values.
  Values can be scalar, sequences or mappings
  Sequences and mappings are both lists of words.
  Their difference is in the intrepretation of words.
  Sequence = list
  Mapping = keys and associated values.
  Syntactically they are the same at Tcl level.

- tclyaml read file <path>

  Convenience command around 'get channel' taking a path to a file to
  process. Otherwise identical.

- tclyaml::reader

  TclOO helper class for the read commands.
  Uses tclyaml::parse::channel (see below)


- tclyaml readTags channel <channel>
- tclyaml readTags file <path>
- tclyaml::taggedreader

  Analogons of the 'read' commands, generating tagged data structures
  instead, with each node a pair, first element the type of the
  second, one of 'scalar', 'sequence', and 'mapping.


- tclyaml::parse::channel <channel> <cmd> ?<arg>...?

  The low-level API to the parser. 

  Processes the yaml documents found in the open channel, starting at
  the current location in that channel.

  Generates a series of events describing the YAML, and invokes the
  specified command prefix (cmd ?arg...?) once per event. Arguments to
  the command prefix are:

  - event type    (string)
  - event details (dictionary)

  The arguments are provided in the order specified above.
  The presence of event details actually depends on the type.
  A number of events do not have any details, and are called only with
  the type.

  The contents of the event detail dictionary depend on the event type.

  Event types, and associated detail dictionary keys (if any):
  See sources, policy.tcl

- tclyaml write channel <struct-def> <chan> <value>
- tclyaml write file    <struct-def> <path> <value>

  Convert the <value> into YAML according to (guided by) the <struct-def>.

  The result is written to the open channel <chan>, at the current
  location, or written to the file at <path>.

- tclyaml::writer

  TclOO helper class used by the write commands above.
  Maintains global styling information.

  Which is currently not exposed to the write commands.

- tclyaml::Emitter

  The low-level Tcl C class wrapping libyaml's emitter functionality.
  The 'writer' class above is a convenience to make usae of optional
  arguments, global styling etc. easier. The C class expects styling
  information at each method call, required or not.

- tclyaml write deftype <name> <arguments> <body>

  Define a new type converter command for use by the main write
  commands. Predefined converters are

	scalar
	sequence
	mapping

   with aliases (see table below) for convenience

			Aliases
	YAML		Tcl	JSON
	-----		----	-----
	scalar		string	-
	sequence	list	array
	mapping		dict	object
	-----		----	-----
